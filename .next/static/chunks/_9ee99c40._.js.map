{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/alloy/Desktop/React%20Projects/grad/src/app/actions/auth.ts"],"sourcesContent":["'use server';\r\n\r\nimport bcrypt from 'bcryptjs';\r\nimport { AuthError } from 'next-auth';\r\nimport { redirect } from 'next/navigation';\r\nimport { ZodError } from 'zod';\r\nimport { signUpSchema } from '~/schema';\r\nimport { signIn, signOut } from '~/server/auth';\r\nimport { db } from '~/server/db';\r\n\r\nexport async function signout() {\r\n  await signOut();\r\n}\r\n\r\nexport async function authenticate(\r\n  prevState: string | undefined,\r\n  formData: FormData\r\n) {\r\n  try {\r\n    const email = formData.get('email')?.toString();\r\n    const password = formData.get('password')?.toString();\r\n\r\n    await signIn('credentials', {\r\n      email,\r\n      password,\r\n      redirect: false,\r\n    });\r\n\r\n    const user = await db.user.findUnique({\r\n      where: { email },\r\n    });\r\n    \r\n    if (user?.role === \"CUSTOMER\") {\r\n      redirect('/cus_dashboard');\r\n    } else {\r\n      redirect('/des_dashboard');\r\n    }\r\n    \r\n  } catch (error) {\r\n    if (error instanceof AuthError) {\r\n      switch (error.type) {\r\n        case 'CredentialsSignin':\r\n          return 'Invalid credentials';\r\n        default:\r\n          return 'Something went wrong';\r\n      }\r\n    }\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport async function register(\r\n  prevState: string | undefined,\r\n  formData: FormData\r\n) {\r\n  try {\r\n    const { email, password, role } = await signUpSchema.parseAsync({\r\n      email: formData.get('email'),\r\n      password: formData.get('password'),\r\n      role: formData.get('role'),\r\n    });\r\n\r\n    const user = await db.user.findUnique({\r\n      where: {\r\n        email: email,\r\n      },\r\n    });\r\n\r\n    if (user) {\r\n      return 'User already exists';\r\n    }\r\n\r\n    const hash = await bcrypt.hash(password, 10);\r\n\r\n    await db.user.create({\r\n      data: {\r\n        email: email,\r\n        password: hash,\r\n        role: role,\r\n      },\r\n    });\r\n  } catch (error) {\r\n    if (error instanceof ZodError) {\r\n      return error.errors.map((error) => error.message).join(', ');\r\n    }\r\n    return 'Something went wrong';\r\n  }\r\n\r\n  redirect('/signin');\r\n}"],"names":[],"mappings":";;;;;;;IAUsB;IAIA;IAqCA","debugId":null}},
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/alloy/Desktop/React%20Projects/grad/src/app/cus_dashboard/page.tsx"],"sourcesContent":["'use client';\r\n\r\nimport { signout } from \"../actions/auth\";\r\n\r\nexport default function Page() {\r\n  return (\r\n    <div>\r\n      <p>Customer Dashboard</p>\r\n      <button onClick={() => signout()}>Sign Out</button>\r\n    </div>\r\n  )\r\n}"],"names":[],"mappings":";;;;AAEA;AAFA;;;AAIe,SAAS;IACtB,qBACE,6LAAC;;0BACC,6LAAC;0BAAE;;;;;;0BACH,6LAAC;gBAAO,SAAS,IAAM,CAAA,GAAA,gIAAA,CAAA,UAAO,AAAD;0BAAK;;;;;;;;;;;;AAGxC;KAPwB","debugId":null}},
    {"offset": {"line": 67, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/alloy/Desktop/React%20Projects/grad/node_modules/next/src/build/webpack/loaders/next-flight-loader/action-client-wrapper.ts"],"sourcesContent":["// This file must be bundled in the app's client layer, it shouldn't be directly\n// imported by the server.\n\nexport { callServer } from 'next/dist/client/app-call-server'\nexport { findSourceMapURL } from 'next/dist/client/app-find-source-map-url'\n\n// A noop wrapper to let the Flight client create the server reference.\n// See also: https://github.com/facebook/react/pull/26632\n// Since we're using the Edge build of Flight client for SSR [1], here we need to\n// also use the same Edge build to create the reference. For the client bundle,\n// we use the default and let Webpack to resolve it to the correct version.\n// 1: https://github.com/vercel/next.js/blob/16eb80b0b0be13f04a6407943664b5efd8f3d7d0/packages/next/src/server/app-render/use-flight-response.tsx#L24-L26\nexport const createServerReference = (\n  (!!process.env.NEXT_RUNTIME\n    ? // eslint-disable-next-line import/no-extraneous-dependencies\n      require('react-server-dom-webpack/client.edge')\n    : // eslint-disable-next-line import/no-extraneous-dependencies\n      require('react-server-dom-webpack/client')) as typeof import('react-server-dom-webpack/client')\n).createServerReference\n"],"names":["callServer","createServerReference","findSourceMapURL","process","env","NEXT_RUNTIME","require"],"mappings":"AAAA,gFAAgF;AAChF,0BAA0B;AAYrBG,QAAQC,GAAG,CAACC,YAAY,GAEvBC,QAAQ,0CAERA,QAAQ;;;;;;;;;;;;;;;;;IAdLN,UAAU,EAAA;eAAVA,eAAAA,UAAU;;IASNC,qBAAqB,EAAA;eAArBA;;IARJC,gBAAgB,EAAA;eAAhBA,qBAAAA,gBAAgB;;;+BADE;qCACM;AAQ1B,MAAMD,wBACV,CAAA,CAAC,+MAI2C,EAC7CA,qBAAqB","ignoreList":[0],"debugId":null}}]
}