{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 20, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/alloy/Desktop/React%20Projects/grad/src/components/canvas/Canvas.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/components/canvas/Canvas.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/canvas/Canvas.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAoS,GACjU,kEACA","debugId":null}},
    {"offset": {"line": 34, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/alloy/Desktop/React%20Projects/grad/src/components/canvas/Canvas.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/components/canvas/Canvas.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/canvas/Canvas.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAgR,GAC7S,8CACA","debugId":null}},
    {"offset": {"line": 48, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 58, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/alloy/Desktop/React%20Projects/grad/src/components/liveblocks/Room.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const Room = registerClientReference(\n    function() { throw new Error(\"Attempted to call Room() from the server but Room is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/liveblocks/Room.tsx <module evaluation>\",\n    \"Room\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,OAAO,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACtC;IAAa,MAAM,IAAI,MAAM;AAAwN,GACrP,oEACA","debugId":null}},
    {"offset": {"line": 72, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/alloy/Desktop/React%20Projects/grad/src/components/liveblocks/Room.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const Room = registerClientReference(\n    function() { throw new Error(\"Attempted to call Room() from the server but Room is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/liveblocks/Room.tsx\",\n    \"Room\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,OAAO,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACtC;IAAa,MAAM,IAAI,MAAM;AAAwN,GACrP,gDACA","debugId":null}},
    {"offset": {"line": 86, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 146, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/alloy/Desktop/React%20Projects/grad/src/schema.ts"],"sourcesContent":["import {object, string, z} from 'zod';\r\n\r\nconst roles = z.enum([\"CUSTOMER\", \"DESIGNER\"]);\r\n\r\nexport const signUpSchema = object({\r\n    email: string({required_error : \"Email is required\"}).email(\"Invalid email\"),\r\n    password: string({required_error : \"Password is required\"}).min(8,\"Password must be at least 8 characters\").max(32,\"Password must be at most 32 characters\"),\r\n    role: roles\r\n})\r\n\r\nexport const signInSchema = object({\r\n    email: string({required_error : \"Email is required\"}).email(\"Invalid email\"),\r\n    password: string({required_error : \"Password is required\"})\r\n})"],"names":[],"mappings":";;;;AAAA;;AAEA,MAAM,QAAQ,oIAAA,CAAA,IAAC,CAAC,IAAI,CAAC;IAAC;IAAY;CAAW;AAEtC,MAAM,eAAe,CAAA,GAAA,oIAAA,CAAA,SAAM,AAAD,EAAE;IAC/B,OAAO,CAAA,GAAA,oIAAA,CAAA,SAAM,AAAD,EAAE;QAAC,gBAAiB;IAAmB,GAAG,KAAK,CAAC;IAC5D,UAAU,CAAA,GAAA,oIAAA,CAAA,SAAM,AAAD,EAAE;QAAC,gBAAiB;IAAsB,GAAG,GAAG,CAAC,GAAE,0CAA0C,GAAG,CAAC,IAAG;IACnH,MAAM;AACV;AAEO,MAAM,eAAe,CAAA,GAAA,oIAAA,CAAA,SAAM,AAAD,EAAE;IAC/B,OAAO,CAAA,GAAA,oIAAA,CAAA,SAAM,AAAD,EAAE;QAAC,gBAAiB;IAAmB,GAAG,KAAK,CAAC;IAC5D,UAAU,CAAA,GAAA,oIAAA,CAAA,SAAM,AAAD,EAAE;QAAC,gBAAiB;IAAsB;AAC7D","debugId":null}},
    {"offset": {"line": 187, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/alloy/Desktop/React%20Projects/grad/src/env.js"],"sourcesContent":["import { createEnv } from \"@t3-oss/env-nextjs\";\nimport { z } from \"zod\";\n\nexport const env = createEnv({\n  /**\n   * Specify your server-side environment variables schema here. This way you can ensure the app\n   * isn't built with invalid env vars.\n   */\n  server: {\n    AUTH_SECRET:\n      process.env.NODE_ENV === \"production\"\n        ? z.string()\n        : z.string().optional(),\n    // AUTH_DISCORD_ID: z.string(),\n    // AUTH_DISCORD_SECRET: z.string(),\n    DATABASE_URL: z.string().url(),\n    NODE_ENV: z\n      .enum([\"development\", \"test\", \"production\"])\n      .default(\"development\"),\n    LIVEBLOCK_PUBLIC_KEY: z.string(),\n    LIVEBLOCK_SECRET_KEY: z.string(),\n  },\n\n  /**\n   * Specify your client-side environment variables schema here. This way you can ensure the app\n   * isn't built with invalid env vars. To expose them to the client, prefix them with\n   * `NEXT_PUBLIC_`.\n   */\n  client: {\n    // NEXT_PUBLIC_CLIENTVAR: z.string(),\n  },\n\n  /**\n   * You can't destruct `process.env` as a regular object in the Next.js edge runtimes (e.g.\n   * middlewares) or client-side so we need to destruct manually.\n   */\n  runtimeEnv: {\n    AUTH_SECRET: process.env.AUTH_SECRET,\n    // AUTH_DISCORD_ID: process.env.AUTH_DISCORD_ID,\n    // AUTH_DISCORD_SECRET: process.env.AUTH_DISCORD_SECRET,\n    DATABASE_URL: process.env.DATABASE_URL,\n    NODE_ENV: process.env.NODE_ENV,\n    LIVEBLOCK_PUBLIC_KEY: process.env.LIVEBLOCK_PUBLIC_KEY,\n    LIVEBLOCK_SECRET_KEY: process.env.LIVEBLOCK_SECRET_KEY,\n  },\n  /**\n   * Run `build` or `dev` with `SKIP_ENV_VALIDATION` to skip env validation. This is especially\n   * useful for Docker builds.\n   */\n  skipValidation: !!process.env.SKIP_ENV_VALIDATION,\n  /**\n   * Makes it so that empty strings are treated as undefined. `SOME_VAR: z.string()` and\n   * `SOME_VAR=''` will throw an error.\n   */\n  emptyStringAsUndefined: true,\n});\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,MAAM,MAAM,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD,EAAE;IAC3B;;;GAGC,GACD,QAAQ;QACN,aACE,6EAEI,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ;QACzB,+BAA+B;QAC/B,mCAAmC;QACnC,cAAc,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG;QAC5B,UAAU,oIAAA,CAAA,IAAC,CACR,IAAI,CAAC;YAAC;YAAe;YAAQ;SAAa,EAC1C,OAAO,CAAC;QACX,sBAAsB,oIAAA,CAAA,IAAC,CAAC,MAAM;QAC9B,sBAAsB,oIAAA,CAAA,IAAC,CAAC,MAAM;IAChC;IAEA;;;;GAIC,GACD,QAAQ;IAER;IAEA;;;GAGC,GACD,YAAY;QACV,aAAa,QAAQ,GAAG,CAAC,WAAW;QACpC,gDAAgD;QAChD,wDAAwD;QACxD,cAAc,QAAQ,GAAG,CAAC,YAAY;QACtC,QAAQ;QACR,sBAAsB,QAAQ,GAAG,CAAC,oBAAoB;QACtD,sBAAsB,QAAQ,GAAG,CAAC,oBAAoB;IACxD;IACA;;;GAGC,GACD,gBAAgB,CAAC,CAAC,QAAQ,GAAG,CAAC,mBAAmB;IACjD;;;GAGC,GACD,wBAAwB;AAC1B","debugId":null}},
    {"offset": {"line": 244, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/alloy/Desktop/React%20Projects/grad/src/server/db.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\n\nimport { env } from \"~/env\";\n\nconst createPrismaClient = () =>\n  new PrismaClient({\n    log:\n      env.NODE_ENV === \"development\" ? [\"query\", \"error\", \"warn\"] : [\"error\"],\n  });\n\nconst globalForPrisma = globalThis as unknown as {\n  prisma: ReturnType<typeof createPrismaClient> | undefined;\n};\n\nexport const db = globalForPrisma.prisma ?? createPrismaClient();\n\nif (env.NODE_ENV !== \"production\") globalForPrisma.prisma = db;"],"names":[],"mappings":";;;AAAA;AAEA;;;AAEA,MAAM,qBAAqB,IACzB,IAAI,6HAAA,CAAA,eAAY,CAAC;QACf,KACE,0GAAA,CAAA,MAAG,CAAC,QAAQ,KAAK,gBAAgB;YAAC;YAAS;YAAS;SAAO,GAAG;YAAC;SAAQ;IAC3E;AAEF,MAAM,kBAAkB;AAIjB,MAAM,KAAK,gBAAgB,MAAM,IAAI;AAE5C,IAAI,0GAAA,CAAA,MAAG,CAAC,QAAQ,KAAK,cAAc,gBAAgB,MAAM,GAAG","debugId":null}},
    {"offset": {"line": 269, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/alloy/Desktop/React%20Projects/grad/src/server/auth/config.ts"],"sourcesContent":["import { PrismaAdapter } from \"@auth/prisma-adapter\";\nimport {type NextAuthConfig, type DefaultSession} from \"next-auth\";\nimport Credentials from \"next-auth/providers/credentials\";\nimport { signInSchema } from \"~/schema\";\nimport bcrypt from \"bcryptjs\";\nimport { db } from \"~/server/db\";\n\n/**\n * Module augmentation for `next-auth` types. Allows us to add custom properties to the `session`\n * object and keep type safety.\n *\n * @see https://next-auth.js.org/getting-started/typescript#module-augmentation\n */\ndeclare module \"next-auth\" {\n  interface Session extends DefaultSession {\n    user: {\n      id: string;\n    } & DefaultSession[\"user\"];\n  }\n}\n\n/**\n * Options for NextAuth.js used to configure adapters, providers, callbacks, etc.\n *\n * @see https://next-auth.js.org/configuration/options\n */\nexport const authConfig = {\n  providers: [\n    Credentials({\n      credentials: {\n        email: {},\n        password: {},\n      },\n      authorize: async (credentials) => {\n        try {\n          const { email, password } =\n            await signInSchema.parseAsync(credentials);\n\n          const user = await db.user.findUnique({\n            where: {\n              email: email,\n            },\n          });\n\n          if (!user) {\n            return null;\n          }\n\n          const passwordMatch = await bcrypt.compare(\n            password,\n            user.password,\n          );\n\n          if (!passwordMatch) {\n            return null;\n          }\n          \n          return user;\n        } \n        catch (error) {\n          return null;\n        }\n      },\n    }),\n  ],\n  session: {\n    strategy: \"jwt\",\n  },\n  adapter: PrismaAdapter(db),\n  callbacks: {\n    session: ({ session, token }) => {\n      return {\n        ...session,\n        user: {\n          ...session.user,\n          id: token.sub,\n        },\n      };\n    },\n  },\n} satisfies NextAuthConfig;"],"names":[],"mappings":";;;AAAA;AAEA;AAAA;AACA;AACA;AACA;;;;;;AAqBO,MAAM,aAAa;IACxB,WAAW;QACT,CAAA,GAAA,0JAAA,CAAA,UAAW,AAAD,EAAE;YACV,aAAa;gBACX,OAAO,CAAC;gBACR,UAAU,CAAC;YACb;YACA,WAAW,OAAO;gBAChB,IAAI;oBACF,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,GACvB,MAAM,6GAAA,CAAA,eAAY,CAAC,UAAU,CAAC;oBAEhC,MAAM,OAAO,MAAM,mHAAA,CAAA,KAAE,CAAC,IAAI,CAAC,UAAU,CAAC;wBACpC,OAAO;4BACL,OAAO;wBACT;oBACF;oBAEA,IAAI,CAAC,MAAM;wBACT,OAAO;oBACT;oBAEA,MAAM,gBAAgB,MAAM,iIAAA,CAAA,UAAM,CAAC,OAAO,CACxC,UACA,KAAK,QAAQ;oBAGf,IAAI,CAAC,eAAe;wBAClB,OAAO;oBACT;oBAEA,OAAO;gBACT,EACA,OAAO,OAAO;oBACZ,OAAO;gBACT;YACF;QACF;KACD;IACD,SAAS;QACP,UAAU;IACZ;IACA,SAAS,CAAA,GAAA,oJAAA,CAAA,gBAAa,AAAD,EAAE,mHAAA,CAAA,KAAE;IACzB,WAAW;QACT,SAAS,CAAC,EAAE,OAAO,EAAE,KAAK,EAAE;YAC1B,OAAO;gBACL,GAAG,OAAO;gBACV,MAAM;oBACJ,GAAG,QAAQ,IAAI;oBACf,IAAI,MAAM,GAAG;gBACf;YACF;QACF;IACF;AACF","debugId":null}},
    {"offset": {"line": 334, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/alloy/Desktop/React%20Projects/grad/src/server/auth/index.ts"],"sourcesContent":["import NextAuth from \"next-auth\";\nimport { cache } from \"react\";\n\nimport { authConfig } from \"./config\";\n\nconst { auth: uncachedAuth, handlers, signIn, signOut } = NextAuth(authConfig);\n\nconst auth = cache(uncachedAuth);\n\nexport { auth, handlers, signIn, signOut };"],"names":[],"mappings":";;;;;;AAAA;AAAA;AACA;AAEA;;;;AAEA,MAAM,EAAE,MAAM,YAAY,EAAE,QAAQ,EAAE,MAAM,EAAE,OAAO,EAAE,GAAG,CAAA,GAAA,qJAAA,CAAA,UAAQ,AAAD,EAAE,+HAAA,CAAA,aAAU;AAE7E,MAAM,OAAO,CAAA,GAAA,qMAAA,CAAA,QAAK,AAAD,EAAE","debugId":null}},
    {"offset": {"line": 356, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/alloy/Desktop/React%20Projects/grad/src/app/des_dashboard/%5Bid%5D/page.tsx"],"sourcesContent":["import Canvas from \"~/components/canvas/Canvas\";\r\nimport { Room } from \"~/components/liveblocks/Room\";\r\nimport { auth } from \"~/server/auth\";\r\ntype ParamsType = Promise<{id:string}>\r\n\r\nexport default async function Page({params} : {params:ParamsType}) {\r\n  const {id} = await params;\r\n  const session = await auth();\r\n\r\n  return (\r\n    <Room roomId={\"room:\" + id}>\r\n      <Canvas></Canvas>\r\n    </Room>\r\n  )\r\n}"],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;;AAGe,eAAe,KAAK,EAAC,MAAM,EAAuB;IAC/D,MAAM,EAAC,EAAE,EAAC,GAAG,MAAM;IACnB,MAAM,UAAU,MAAM,CAAA,GAAA,8HAAA,CAAA,OAAI,AAAD;IAEzB,qBACE,8OAAC,wIAAA,CAAA,OAAI;QAAC,QAAQ,UAAU;kBACtB,cAAA,8OAAC,sIAAA,CAAA,UAAM;;;;;;;;;;AAGb","debugId":null}}]
}