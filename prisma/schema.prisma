generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String
  role          Role      @default(CUSTOMER)
  accounts      Account[]
  sessions      Session[]
  posts         Post[]    // One-to-many relation with Post
  designUploads DesignUpload[] // One-to-many relation with DesignUpload
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  CUSTOMER
  DESIGNER
}

model Post {
  id           Int           @id @default(autoincrement())
  title        String
  content      String
  author       String
  userId       String
  createdAt    DateTime      @default(now())
  comments     Comment[]
  designUploads DesignUpload[] // One-to-many relation with DesignUpload
  user         User          @relation(fields: [userId], references: [id])
}

model Comment {
  id        Int       @id @default(autoincrement())
  text      String
  author    String
  createdAt DateTime  @default(now())
  postId    Int
  post      Post      @relation(fields: [postId], references: [id])
}

model DesignUpload {
  id         Int    @id @default(autoincrement())
  designerId String
  designer   User   @relation(fields: [designerId], references: [id]) // Relation to User
  postId     Int
  post       Post   @relation(fields: [postId], references: [id]) // Relation to Post
}
